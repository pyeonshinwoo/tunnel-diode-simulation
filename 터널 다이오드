import React, { useState, useEffect } from "react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  ReferenceLine,
} from "recharts";
import { Card, CardContent } from "@/components/ui/card";
import { Slider } from "@/components/ui/slider";
import { Button } from "@/components/ui/button";

function thermalVoltage(T: number) {
  const k = 1.38e-23; // Boltzmann
  const q = 1.6e-19; // charge
  return (k * T) / q;
}

function generateTunnelDiodeIV(Vp: number, Ip: number, Vv: number, Iv: number, T: number) {
  const Vt = thermalVoltage(T); // 온도 기반
  const Is = 1e-9;
  const data = [];
  const step = 0.005;
  for (let V = 0; V <= 1; V += step) {
    let I = 0;
    if (V <= Vp) {
      I = Ip * Math.sin((Math.PI / 2) * (V / Vp));
    } else if (V <= Vv) {
      I = Ip - ((Ip - Iv) * (V - Vp)) / (Vv - Vp);
    } else {
      I = Iv + Is * (Math.exp((V - Vv) / (Vt * 2)) - 1);
    }
    data.push({ voltage: +V.toFixed(3), current: +I.toFixed(4) });
  }
  return data;
}

export default function TunnelDiodeSimulator() {
  const [Vp, setVp] = useState(0.1);
  const [Ip, setIp] = useState(0.005);
  const [Vv, setVv] = useState(0.35);
  const [Iv, setIv] = useState(0.001);
  const [T, setT] = useState(300); // 온도 (K)
  const [inputCurrent, setInputCurrent] = useState(0.002);
  const [showCompare, setShowCompare] = useState(false);

  const data = generateTunnelDiodeIV(Vp, Ip, Vv, Iv, T);
  const dataCompare = generateTunnelDiodeIV(0.4, 0.002, 0.6, 0.001, T);

  // 입력 전류로부터 대응 전압 계산
  const matched = data.find((d) => Math.abs(d.current - inputCurrent) < 0.0003);
  const resistance = matched ? (matched.voltage / matched.current).toFixed(2) : "-";

  return (
    <Card className="max-w-6xl mx-auto mt-6 p-4 shadow-xl rounded-2xl">
      <CardContent>
        <h2 className="text-xl font-bold mb-4">터널 다이오드 I-V 시뮬레이터</h2>

        <ResponsiveContainer width="100%" height={400}>
          <LineChart data={showCompare ? dataCompare : data} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="voltage" type="number" domain={[0, 1]} tickCount={11} label={{ value: "전압 (V)", position: "insideBottomRight", offset: -5 }} />
            <YAxis domain={[0, "auto"]} label={{ value: "전류 (A)", angle: -90, position: "insideLeft" }} />
            <Tooltip
              formatter={(value: number, name: string) => [`${value.toFixed(4)} ${name === "current" ? "A" : "V"}`, name === "current" ? "전류" : "전압"]}
            />
            <ReferenceLine x={Vp} stroke="red" strokeDasharray="3 3" label="Vp" />
            <ReferenceLine x={Vv} stroke="blue" strokeDasharray="3 3" label="Vv" />
            <Line type="monotone" dataKey="current" stroke="#8884d8" dot={false} isAnimationActive={false} />
          </LineChart>
        </ResponsiveContainer>

        <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mt-6">
          <div>
            <label>피크 전압 Vp: {Vp.toFixed(2)} V</label>
            <Slider min={0.05} max={0.2} step={0.005} value={[Vp]} onValueChange={([v]) => setVp(v)} />
          </div>
          <div>
            <label>피크 전류 Ip: {Ip.toFixed(3)} A</label>
            <Slider min={0.001} max={0.01} step={0.0005} value={[Ip]} onValueChange={([v]) => setIp(v)} />
          </div>
          <div>
            <label>밸리 전압 Vv: {Vv.toFixed(2)} V</label>
            <Slider min={0.2} max={0.5} step={0.005} value={[Vv]} onValueChange={([v]) => setVv(v)} />
          </div>
          <div>
            <label>밸리 전류 Iv: {Iv.toFixed(3)} A</label>
            <Slider min={0.0005} max={0.005} step={0.0005} value={[Iv]} onValueChange={([v]) => setIv(v)} />
          </div>
          <div>
            <label>온도 T: {T} K</label>
            <Slider min={200} max={400} step={5} value={[T]} onValueChange={([v]) => setT(v)} />
          </div>
          <div>
            <label>전류 수동 입력: {inputCurrent.toFixed(4)} A</label>
            <Slider min={0.0005} max={0.01} step={0.0005} value={[inputCurrent]} onValueChange={([v]) => setInputCurrent(v)} />
            <p className="text-sm mt-1">해당 전류에 대응하는 전압: {matched ? matched.voltage.toFixed(3) + " V" : "없음"}</p>
            <p className="text-sm">음의 저항 값(R = V/I): {resistance} Ω</p>
          </div>
        </div>

        <div className="mt-4 flex justify-end space-x-2">
          <Button onClick={() => setShowCompare((v) => !v)}>
            {showCompare ? "터널 다이오드 보기" : "일반 다이오드 비교"}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
